package main

import "fmt"

func main() {
	// a,b 是一个值
	a := 5
	b := 6

	fmt.Println("a的值：", a) //5

	// 指针变量 c 存储的是变量 a 的内存地址
	c := &a
	fmt.Println("a的内存地址：", c) //0xc0000ae008

	// 指针变量不允许直接赋值，需要使用 * 获取引用
	//c = 4

	// 将指针变量 c 指向的内存里面的值设置为4
	*c = 4
	fmt.Println("a的值：", a) //4

	// 指针变量 c 现在存储的是变量 b 的内存地址
	c = &b
	fmt.Println("b的内存地址：", c) //0xc0000ae010

	// 将指针变量 c 指向的内存里面的值设置为4
	*c = 8
	fmt.Println("a的值：", a) //4
	fmt.Println("b的值：", b) //8

	// 把指针变量 c 赋予 c1, c1 是一个引用变量，存的只是指针地址，他们两个现在是独立的了
	c1 := c
	fmt.Println("c存放的内存地址：", c)   //0xc0000ae010
	fmt.Println("c1存放的内存地址：", c1) //0xc0000ae010

	// 将指针变量 c 指向的内存里面的值设置为4
	*c = 9
	fmt.Println("c指向的内存地址的值", *c)   //9
	fmt.Println("c1指向的内存地址的值", *c1) //9

	// 指针变量 c 现在存储的是变量 a 的内存地址，但 c1 还是不变
	c = &a
	fmt.Println("c存放的内存地址：", c)   //0xc0000ae008
	fmt.Println("c1存放的内存地址：", c1) //0xc0000ae008
}
// 那么a，b是一个值变量，而c是指针变量，c1是引用变量。
// 如果&加在变量a前：c := &a，表示取变量a的内存地址，c指向了a，它是一个指针变量。
// 当获取或设置指针指向的内存的值时，在指针变量前面加*，然后赋值，如：*c = 4，指针指向的变量a将会变化。
// 如果将指针变量赋予另外一个变量：c1 := c，那另外一个变量c1可以叫做引用变量，它存的值也是内存地址，内存地址指向的也是变量a，这时候，引用变量只是指针变量的拷贝，两个变量是互相独立的。
// 值变量可以称为值类型，引用变量和指针变量都可以叫做引用类型。
// 如何声明一个引用类型的变量（也就是指针变量）呢？
// 我们可以在数据类型前面加一个*来表示：
// var d *int