https://segmentfault.com/a/1190000020086769

深入理解Go-垃圾回收机制

Go的GC自打出生的时候就开始被人诟病，但是在引入v1.5的三色标记和v1.8的混合写屏障后，
正常的GC已经缩短到10us左右，已经变得非常优秀，了不起了，我们接下来探索一下Go的GC的原理吧

三色标记原理
我们首先看一张图，大概就会对 三色标记法 有一个大致的了解：

原理：

1. 首先把所有的对象都放到白色的集合中
2. 从根节点开始遍历对象，遍历到的白色对象从白色集合中放到灰色集合中
3. 遍历灰色集合中的对象，把灰色对象引用的白色集合的对象放入到灰色集合中，同时把遍历过的灰色集合中的对象放到黑色的集合中
4. 循环步骤3，直到灰色集合中没有对象
5. 步骤4结束后，白色集合中的对象就是不可达对象，也就是垃圾，进行回收

写屏障
Go在进行三色标记的时候并没有STW，也就是说，此时的对象还是可以进行修改

那么我们考虑一下，下面的情况

我们在进行三色标记中扫描灰色集合中，扫描到了对象A，并标记了对象A的所有引用，
这时候，开始扫描对象D的引用，而此时，另一个goroutine修改了D->E的引用，变成了如下图所示




