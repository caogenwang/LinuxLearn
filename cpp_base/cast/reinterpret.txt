reinterpret_cast <new_type> (expression)
reinterpret_cast运算符是用来处理无关类型之间的转换；
它会产生一个新的值，这个值会有与原始参数（expressoin）有完全相同的比特位。

什么是无关类型？我没有弄清楚，没有找到好的文档来说明类型之间到底都有些什么关系（除了类的继承以外）。
后半句倒是看出了reinterpret_cast的字面意思：重新解释（类型的比特位）。
我们真的可以随意将一个类型值的比特位交给另一个类型作为它的值吗？其实不然。

里倒是明确告诉了我们reinterpret_cast可以，或者说应该在什么地方用来作为转换运算符：

从指针类型到一个足够大的整数类型
从整数类型或者枚举类型到指针类型
从一个指向函数的指针到另一个不同类型的指向函数的指针
从一个指向对象的指针到另一个不同类型的指向对象的指针
从一个指向类函数成员的指针到另一个指向不同类型的函数成员的指针
从一个指向类数据成员的指针到另一个指向不同类型的数据成员的指针

所以总结来说：reinterpret_cast用在任意指针（或引用）类型之间的转换；
            以及指针与足够大的整数类型之间的转换；从整数类型（包括枚举类型）到指针类型，无视大小。

只有将转换后的类型值转换回到其原始类型，这样才是正确使用reinterpret_cast方
这样说起来，reinterpret_cast转换成其它类型的目的只是临时的隐藏自己的什么（做个卧底？），
要真想使用那个值，还是需要让其露出真面目才行。那到底它在C++中有其何存在的价值呢？




