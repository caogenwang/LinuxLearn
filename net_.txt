网络编程:
1.nagle 算法；
    是为了减少广域网的小分组数目，从而减小网络拥塞的出现;该算法要求一个tcp连接上最多只能有一个
    未被确认的未完成的小分组，在该分组ack到达之前不能发送其他的小分组，tcp需要收集这些少量的分组，
    并在ack到来时以一个分组的方式发送出去；其中小分组的定义是小于MSS的任何分组.该算法的优越之处在于它是自适应的，
    确认到达的越快，数据也就发哦送的越快；而在希望减少微小分组数目的低速广域网上，则会发送更少的分组。
    如果延迟ACK和nagle算法相遇，会导致访问数据经过较长时间送达。

2. keepalive 选项；
   tcp的长连接，通过定时发送keepalive包，维持两端的连接，不把连接销毁，是一种保活的机制。

3. Linger 选项；
    SO_LINGER选项用来设置延迟关闭的时间，等待套接字发送缓冲区中的数据发送完成。没有设置该选项时，
    在调用close()后，在发送完FIN后会立即进行一些清理工作并返回。如果设置了SO_LINGER选项，
    并且等待时间为正值，则在清理之前会等待一段时间。
    从这里看来，SO_LINGER选项的作用是等待发送缓冲区中的数据发送完成，但是并不保证发送缓冲区中的数据一定被对端接收
    （对端宕机或线路问题），只是说会等待一段时间让这个过程完成。如果在等待的这段时间里接收到了带数据的包，
    还是会给对端发送RST包，并且会reset掉套接字，因为此时已经关闭了接收通道

4.对于某一端出现大量CLOSE_WAIT或者TIME_WAIT如何解决；


5.通讯协议如何设计或如何解决数据包的粘包与分片问题；
    https://blog.csdn.net/qq513036862/article/details/53640317
    

6.心跳机制如何设计；（可能不会直接问问题本身，如问如何检查死链）

7.断线重连机制如何设计；

8.对 IO Multiplexing 技术的理解；

9.收发数据包正确的方式，收发缓冲区如何设计；

10.优雅关闭；

11.定时器如何设计；

12.epoll 的实现原理。