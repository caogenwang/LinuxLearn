感谢张磊，这是本人看过解释 Pod 以及为何要有 Pod 这个设计最好的文章（看过估计20篇，这是第一篇中文的）。

云计算系统的操作系统是 k8s ，容器就相当于是其进程，而 Pod 则是进程组。这样解释给有 Linux 运维底子的人听，基本上一下子就明白过来了。赞！但容器镜像是「 .exe 」安装包似乎有点不妥，个人觉得是二进制可执行安装包似乎更恰当和通用一些。

Pod 的另一个重要意义，容器设计模式，通过这篇里有了更深的认知，在迁移传统基于虚拟机的应用时起到了关键作用。

1.
其实 k8s.gcr.io/pause 是前不久读了好几遍（因为讲的比较生涩） Ian Lewis 的 The Almighty Pause Container 这篇才基本明白原理。再读这篇算是巩固和解惑了。
「而后这个 /app 目录，就挂载了一个名叫 app-volume 的 Volume 」惭愧，作为有18年实践经验的 Linux 老司机居然也愣了几十秒，继续往下看解释后才恍然大悟 volume 和 mountPath 是 bind mount （建议附注一下是绑定挂载）。
最后的总结也非常棒，「 Pod 实际上是在扮演传统基础设施里"虚拟机"的角色；而容器则是这个虚拟机里的应用程序」。要完成传统基于虚拟机的应用到微服务架构的迁移，核心思想是：分析应用组成（组件、进程），将其拆分成松耦合的容器（以容器镜像方式分发），利用 Init Container 来解决顺序和依赖关系。
这个课程，光这一篇就值回票价了。居然还附带学习到了 Docker Swarm 的局限性

2.
刚上网查了，Linux 支持7种namespace:
1. cgroup用于隔离cgroup根目录;
2. IPC用于隔离系统消息队列;
3. Network隔离网络;
4. Mount隔离挂载点;
5. PID隔离进程;
6. User隔离用户和用户组;
7. UTS隔离主机名nis域名。

3.
看得太爽了。请教一个问题：
war和tamcat这种情况。
如果把war独立出来做一个镜像的话，应该用什么做基础镜像呢？
我现在做镜像的时候通常都是用debian做基础镜像，但如果只是为了复制这个.war包的话，用debian感觉蛮浪费的。应该怎样做到最小呢，而且要支持cp命令。
作者回复: 市面上的小镜像多的很啊，busybox，alpine